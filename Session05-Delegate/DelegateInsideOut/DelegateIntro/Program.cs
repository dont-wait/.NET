namespace DelegateIntro {     //delegate sẽ khai báo ở bên ngoài class khác, và nằm dưới namespace/package     //Solution có nhiều Project     //Project có nhiều Namespace     //Namespace có nhiều Class       //tao - delegate là 1 datatype cho nhóm object phức tạp là cái đám hàm tao trỏ/quản lí, đại diện     //, tao bình đẳng với các class/data type khác      public delegate void X();   // X: tui là class x đại diẹn cho  1 đám hàm ở dưới hay đâu đó có chung style là void ???()     //CHÍNH LÀ LỆNH KHAI BÁO CLASS VIẾT NGÁN GỌN - VIẾT NGOÀI CLASS KHÁC (NEWBIE)     //public class X [void x()] : Delegate //    {       //       public x(đưa vào tên hàm cần cất trữ)  //       do X đại diện cho 1 đám hàm, đưa hàm đây tao cất tữ đại diện trỏ  //       delegate   //   }               //x f = value là tên hàm ở dưới, là nick name cho tên hàm nào đó ở dưới             //f là tên gọi khác cho cái hàm ở duói cùng style X     //int x = value 10          //KHAI BÁO BIẾN VÀ SỬ DỤNG THÌ PHẢI Ở TRONG HÀM, HAY TRONG CLASS KHÁC NÀO ĐÓ!!!     //X SẴN SÀNG LÀ DATATYPE BÌNH ĐẲNG NHƯ PERSON, DOG, CAT, PET, RECTANGLE     //DÙNG DATATYPE NHƯ BTH       public class Person      {              }     internal class Program     {         //static void Main(string[] args)         //{         //    //Student s = new Student();         //    //int     yob = 2003;         //    //X        f1 = Tên hàm nào đó cùng style X đã định nghĩa ở trên         //    //          f1 trỏ đến hàm nào đó cùng syle X         //    //          f1 là nick name, là đại diện, nhận ủy quyền từ hàm khác         //    //      f1 là con trỏ hàm, biến trỏ đến 1 hàm cụ thể         //    //      f1 và hàm lúc này là 1         //    //      gọi f1 cx như gọi hàm         //    //      dùng f1() và hàm() đều run hàm như nhau         //    //      run qua biến ủy quyền - run gián tiếp         //    //  vs.run trực tiếp tên hàm như 100 năm nay          //    X f1 = new X(TellHer);  //f1 là tên khác, nick name của TellHer         //                            //f1 và TellHer là như nhau, là 1 lúc này         //                            //f1 cx là TellHer         //                            //giống như sếp là NTT, TB, 1994, Chúng ra của tương lai         //                            //f1 trỏ TellHer, f1 là con trỏ hàm         //                            //f1 đại diện cho TellHer, f1 là delegate         //                            //   ủy quyền         //    X f2 = NhanEm;          //viết tắt, bỏ new cho tụ nhiên như style          //                            //để giống như int yob = 2003;         //                            //int[] arr = new int[300];         //                            //int[] arr = {5, 10, 15, 20, 25, 30};         //                            //Student s = new Student(...);         //                            //Student s = new(...);          //    //HẾT SỨC LUU Ý, KHI GÁN BIẾN/NICK NAME CHO 1 HÀM CỤ THỂ NÀO ĐÓ         //    //TUYỆT ĐỐI KO GHI TÊN HÀM KÈM() DẤU NGOẶC!!!         //    //VÌ GHI() NGHĨA LÀ RUN HÀM LUN RỒI         //    //TRONG KHI ĐÓ LỆNH X F2 = NhanEm mang ý nghĩa là đặt         //    //nick name cho 1 hàm cụ thể nào đó, gán giá trị biến         //    //biến, giá trị hơi đặc biệt tí: giá trị là 1 cái hàm         //    //đưa tên hàm, chứ ko phải run hàm          //    //GỌI HÀM CHÀO NHAU HOY         //    //GỌI TRỰC TIẾP NHƯ 2 LỆNH ĐÃ CMT Ở TRÊN - KO THÈM LÀM, TRUYỀN THỐNG RỒI          //    //TA GỌI QUA CON TRỎ HÀM, BIẾN DELEGATE, BIẾN ỦY QUYỀN, BIẾN NICK NAME         //    //BIẾN F1 ĐẠI DIỆN HÀM NÀO ĐÓ, GỌI HÀM TRỰC TIẾP HOẶC GỌI QUA ỦY QUYỀN          //    f1();   //vì câu lệnh x f1 = TellHer; do đó TellHer() là chạy hàm         //            //thì f1() cx là chạy hàm mà là chạy hàm TellHer();         //            //gọi hàm gián tiếp, hàm đã đc ỦY QUYỀN CHO THẰNG KHÁC CHẠY THAY VÌ TỰ CHẠY         //            //ỦY QUYỀN, ỦY NHIỆM, ỦY THÁC, ĐẠI DIỆN => DELEGATE         //            //DELEGATE: LÀ KĨ THUẬT ĐẶT TÊN GỌI KHÁC CHO 1 CÁI HÀM CỤ THỂ NÀO ĐÓ         //            //VÀ KHI ĐÓ HÀM CỤ THỂ SẼ CÓ 2 CÁCH GỌI, GỌI TRỰC TIẾP HÀM NHƯ XƯA NAY         //            //                                       GỌI HÀM QUA TÊN NICK NAME ỦY QUYỀN         //    f2();          //    //CÁCH GỌI THỨ 3: gọi qua hàm Invoke() đc tạo sẵn         //    Console.WriteLine("Call message by using Invoke() method inside");         //    f1.Invoke();    //x là class có nhiều hàm bên trong như class Student         //    f2.Invoke();    //bên trong còn chứa cả tên hàm!!!         //                    //có quyền gọi hàm từ bên trong hay gọi tắt()           //}         //ctrl K + C cmt nhanh Ctrl k u           //chơi delegate style nhiều hàm đc nhồi vào biến thuộc styleX         //1 LUẬT SƯ ĐẠI DIỆN NHIỀU THÂN CHỦ         //1 CON TRỎ TRỎ ĐA HÀM, VẪN 1 VÙNG NEW X()         //X CÒN ĐÓNG VAI THÙNG CHỨA TÊN HÀM, BOX CHỨA TÊN HÀM, CABINET, CONTAINER         //HƠN LÀ 1 CLASS CHỨA BÊN TRONG 1 INFO ĐƠN LẺ KIỂU PERSON, CAT, DOG          //static void Main(string[] args)         //{         //    X f = new X(TellHer);   //int x = 10;         //    f += NhanEm;            // x += 5; ghép 10 + 5         //    f += SayHelloToSweetHeart;          //    //f là gã luật sư đại diện cho 3 thân chủ thay vì chỉ 1  - multicast delegates          //    //GỌI 3 HÀM CÙNG LÚC         //    //1. Gọi lẻ truyền thống TellHer() NhanEm() SayHelloto()         //    //2. Gọi qua f(), duyệt mảng/list ác tên hàm đã add() vào và run()         //    //3. Gọi qua f.Invoke() duyệt...         //    f.Invoke();         //}         //static void Main(string[] args)         //{         //    X f = TellHer;  //new x(TellHer); cái đã tạo ko gian đề phòng add nhiều tên hàm         //    f += NhanEm;         //    f += SayHelloToSweetHeart;          //    f.Invoke(); //f()         //    f.+=(hàm khác đưa thêm vào)         //}         static void Main(string[] args)         {             X f = TellHer;             f = NhanEm; //đè con trỏ              f();    //đáp án ra gì??? int a = 10; a = 11                     //TẠI 1 THỜI ĐIỂM BIẾN CHỈ LƯU 1 VALUE, TÊN GỌI ỨNG 1 VALUE!!!                     //TỪ BỎ THÂN CHỦ TELLHER KÍ HỢP ĐỒNG VỚI THÂN CHỦ MỚI             //HẾT SỨC LƯU Ý VÀ CẨN THẬN VỚI =, KHÁC +=!!!!!!          }          static void TellHer() => Console.WriteLine("Cuộc sống em ổn không. xa anh em phải hạnh phúc!!!");         static void NhanEm() => Console.WriteLine("Chúc em hạnh phúc bên người !!!");         static void SayHelloToSweetHeart() => Console.WriteLine("Bánh mì hem, hai ta về chung 1 nhà !!!");         //còn nhiều hàm nx trong tương lai ở đây, mà có thể ở Project khác, .DLL khác         static void HelloWorld() => Console.WriteLine("Hello Delegate");     }     } 