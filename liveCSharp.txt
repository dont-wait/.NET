=================================================================================================
IV. CÁCH THỂ HIỆN, CÁCH ĐỊNH NGHĨA RA DATA TYPE CHO NHÓM DỮ LIỆU PHÚC TẠP {.....}  {...} void F() {}
1. DATA TYPE DỮ LIỆU ĐƠN GIẢN
* DATA TYPE: DANH TỪ CHUNG, LÀ TÊN GỌI CHUNG CHO 1 NHÓM DỮ LIỆU, THÔNG TIN ĐƠN GIẢN MÀ ĐỒNG DẠNG, 
CÙNG HÌNH DẠNG/FORMAT
* int/long: 5 10 15 20 100 500 -5... (NGUYÊN CON, KO LẺ MIẾNG)
* float/double: 3.14 9.8 10% 3/4... (CÓ LẺ MIẾNG) 

2. DATA TYPE DỮ LIỆU PHỨC TẠP - KO PHẢI LÀ HÀM, MÀ LÀ ĐỐI TUỌNG NÀO ĐÓ CÓ NHIỀU INFO
* DATA TYPE: DANH TỪ CHUNG, LÀ TÊN GỌI CHUNG CHO 1 NHÓM DỮ LIỆU, THÔNG TIN ĐƠN GIẢN MÀ ĐỒNG DẠNG, 
CÙNG HÌNH DẠNG/FORMAT
* Person: {Tên..., Ngày sinh..., Nơi sinh...} {NGUYỄN THANH TÙNG, 1994, THÁI BÌNH...}
* Singer: {Tên..., Ngày sinh..., Nơi sinh..., Nick: } {NGUYỄN THANH TÙNG, 1994, THÁI BÌNH, SƠN TÙNG M-TP}
* Player, Footballer: {Tên..., Ngày sinh..., Nơi sinh..., Nick..., Number..., Goals..., CLB..., Awards...}
				{Messi, 1994,...}
Person, Singer, Player: nhóm người, nhóm đối tượng có nhiều info => gọi tên khác là ENTITY (DATABASE)
															    CLASS    (LẬP TRÌNH)
															    DATA TYPE: DẠNG DỮ LIỆU			
Class: sự phân nhóm, phân hạng
>>>> CODE ĐỂ THỂ HIỆN Ý TƯỞNG LƯU TRỮ VÀ XỬ LÍ CÁC INFO NGOÀI ĐỜI BẰNG MÁY TÍNH (ABSTRACTION - TRỪU TƯỢNG)
HÓA - BIỂ DIỄN INFO NGOÀI ĐỜI THỰC QUA MÁY TÍNH, PERSON NGOÀI ĐỜI -> CLASS TRONG OOP)
public class Person { //Java
   private String id;
   private String name;
  private int yob;
}
//DATA TYPE LÀ TÊN CHUNG/DANH TỪ CHUNG CHO RẤT NHIỀU OBJECT PHỨC TẠP {...} NGOÀI KIA, GỒM BẠN, TÔI
public class Person 			public class Person
{ //C#					{
     private string _id;				public string Id { get; set; } //Id có đc set() public???
     private string _name;			public string Name { get; set; }
     private int _yob				public int Yob { get; set; }
     ...						...
}						}

//TẠO RA DỮ LIỆU -> BIẾN ĐI KÈM LÀ DANH TỪ RIÊNG, TÊN TẮT, NICK NAME CHO 1 OBJECT THẬT NGOÀI KIA
//Person an  =	{XXX, AN, 2003, HCM,  ...}
Person an = new Person(...); //Java
Person an = new Person(...){...}; //C#: object initializer - tạo object, tạo value = dùng hàm Set(...)

Data	    var    value
vietsub: X là tên gọi chung/danh từ chung cho 1 nhóm hành động bề ngoài: ko nhận đầu vào, ko trả ra gì cả,
chỉ xử lí gì đó bên trong {...}

NGẦM TRONG THỂ HIỆN CODE, X LÀ 1 CLASS, 1 NHÓM PHỨC TẠP
DATA TYPE CHO NHÓM PHỨC TẠP, TÊN NHÓM PHỨC TẠP THÌ CÒN GỌI LÀ CLASS, CLASS PERSON, CLASS PET, CLASS
RECTANGLE,...
1
2
3
4
-----
int
2.2 DATA TYPE DỮ LIỆU PHỨC TẠP - LÀ QUÁ TR$ỜI ÁC LOẠI HÀM,
								  HÀM Ó:       ??? F_NAME(???) {...}
								  - TÊN HÀM
							          - CÓ TRẢ VỀ GIÁ TRỊ HAY KO
								 - CÓ ĐẦU VÀO HAY KO
								 - CODE BÊN TRONG HÀM ĐỂ XỬ LÍ INFO NÓI CHUNG {...}
* DATA TYPE: DANH TỪ CHUNG, LÀ TÊN GỌI CHUNG CHO 1 NHÓM DỮ LIỆU, THÔNG TIN ĐƠN GIẢN MÀ ĐỒNG DẠNG, 
CÙNG HÌNH DẠNG/FORMAT

void SayHello() {...}
void NhanEM() {...}
void TellHer() {...}
-----------------------------
delegate void X();: >>>>> X LÀ 1 CLASS NHƯ STYLE PERSON, DOG, CAT, CAR, PET, LECTURER, DOCTER, USER,...

public class X [void X()] Delegate		public class Person
{									{
	_fName/./tên hàm cần lưu					Id, Name, Yob...
	//vì X là tên chung cho nhiều hàm			//Person đại diện cho nhiều công dân	
	//nên X cần có chỗ để lưu tên hàm			//Person phải có chỗ để lưu info công dân
	
	//CONSTRUCTOR - PHỄU ĐỔ INFO BÊN NGOÀI VÀO BÊN TRONG CÁI CLASS/KHUÔN
	public X(tên hàm-muốn-lưu-trữ)								public Student(id, name, yob)
	{												{
		-fName = t								        		Id = id;...
	}												}			
													
	
	//GET SET TRUYÊN THỐNG JAVE 						HOẶC VIẾT TẮT THEO STYLE PROPERTY GET; SET; CỦA C#
	//						  LOMBOK (3RD PARTY)												
	
	public void Invoke()	//hàm có sẵn khi tạo class Delegate X, hoặc tạo theo style  nhanh, giống kiểu ToString()

	{
		_fName() //tên hàm đc lưu trữ gửi vào sẽ đc run = cách thêm dấu() để run
	}

}									    }
======================================
>>>>>>>>> ĐẶC BIỆT CHO CÁC CLASS MÀ ĐẠI DIỆN CHO 1 NHÓM HÀM NÀO ĐÓ, TA KO CẦN MẤT SỨC VIẾT THEO STYLE
CLASS TRUYỀN THỐNG
delegate void X() LÀ ĐỦ GỒI, KO CẦN CODE THEO STYLE DÀI DÒNG CLASS TRUYỀN THỐNG
				LÍ DO: TA CHỈ CẦN LƯU CÁI TÊN HÀM, DO TA ĐẠI DIỆN CHO 1 ĐÁM HÀM CÙNG STYLE
					     ĐẠI DIỆN HÀM NÀO THÌ CHỈ CẦN NÓI TÊN HÀM LÀ ĐỦ, QUA TÊN HÀM THÌ MÒ VÀO CHI TIẾT XỬ LÍ
					    CỦA HÀM Ở {...}. CODE NẾU CÓ CŨNG NGẮN, KO CẦN THIẾT public class ... {...}

********** CODE NGẮN GỌN CHO CÁI CLASS ĐẠI DIỆN CHO NHÓM HÀM!!!!!!!!!!!!!!!!!!

delegate STYLE NHÓM HÀM Ở ĐÂY KÈM CÁI TÊN CHUNG LÀ ĐỦ RỒI
delegate void X()	  		//X: tên chung cho nhómhàm ko vào ko ra
delegate void Y(int)		//Y: tên chung cho nhóm hàm nhận vào 1 con int và ko ra
delegate void YY(int, int)	//YY: tên chung cho nhóm hàm nhận vào 2 con int, ko ra
delegate int Z()			//Z: tên chung cho nhóm hàm ko vào nhưng trả ra
delegate int ZZ(int)		//ZZ: tên chung cho nhóm hàm có 1 vào, trả ra
delegate int NE(int, float)	//NE: tên chung cho nhóm hàm có 2 vào int, float, có trả ra

NHÓM HÀM NHIỀU - CLASS NHIỀU
CX NHƯ NHIỀU CLASS NGOÀI KIA: PERSON, CAR, DOG, CAT, PET, RECTANGLE, CIRLE, TRIANGLE, FILE, STRING,...

3. XÀI DATA TYPE THÌ SAO???
* KHAI BÁO BIẾN > THUỘC DATA TYPE > GÁN VALUE = NEW(...) {...}
int 	      x = 10;										//đưa con số cho tao, số 10, tao gọi nó là x
Student x = new Student(...) {...};						//đưa info sv đây cho tao, tao gọi hẳn là s, an, bình,...
X		f = new X(tên-hàm-cụ-thể-nào-đó có ở đâu đó);	//đưa tên hàm vào cho tao, và gọi là f
	        f = new X(SayHello);

KỂ TỪ NAY VỀ SAU, CÁI HÀM CỤ THỂ NÀO ĐÓ ví dụ HÀM SayHello Đ GỌI TÊN LÀ F

F  LÀ  NICK NAME CỦA HÀM SAYHELLO Ở ĐOẠN GHI CHÚ TRÊN!!!

4. DELEGATE CLASS  THÊM CÓ  MỘT TRÒ  ĐẶC BIỆT - NÓ  CÓ KHẢ NĂNG LƯU NHIỀU TÊN HÀM CÙNG 1 LÚC
   MULTICAST DELEGATE
public class X [void X()] Delegate		
{									
	_fName/./tên hàm cần lưu					
	//vì X là tên chung cho nhiều hàm	
	List<> danh-sách-các-tên-hàm-cùng-style
	[] mảng -các-tên-hàm-cùng-style;

	//TÙY LÚC MÌNH GÁN TÊN HÀM VÀO BIẾN F DELEGATE THÌ SẼ XÀI ĐƠN HÀM, HAY ĐA HÀM CÙNG
	
	public X(tên-ham-mun-luu)
	{
	-fName = tên-hàm-muốn-lưu-trữ;
	}	
	public void Invoke()
	{
		_fName()
		List<> các hàm đc gọi = cách thêm() trên từng tên hàm để run()
	}
}

HÀM DẤU += ĐỂ GHÉP THÊM TÊN CÁC HÀM VÀO DANH SÁCH ĐẠI DIỆN!!!()
//KĨ THUẬT OVERRIDE CÁC OPERATOR, ĐỊNH NGHĨA LẠI CÁC DẤU + - * / THAY VÌ LÀM TRONG TOÁN HỌC
//GIỜ TOÁN TRONG OBJECT!!!

===================================================
REVIEW NHANH LẠI VỀ DELEGATE - ỦY NHIỆM, ỦY QUYỀN, TRAO QUYỀN, ĐẠI DIỆN, SỨ GIẢ, 1 PHIÊN BẢN CLONE, 1 NICK NAME KHÁC,
1 CÁCH GỌI TÊN KHÁC, MỘT CON TRỎ...
1. DELEGATE LÀ 1 CLASS NHƯ CÁC CLASS TRUYỀN THỐNG DOG, CAT, PERSON, PRODUCT...
    DELEGATE LÀ CLASS NAME, LÀ TÊN GỌI CHUNG, DANH TỪ CHUNG ĐẠI DIỆN CHO NHIỀU HÀM CÙNG 1 STYLE NÀO ĐÓ
    NÓ DÙNG ĐỂ NÓI VỀ 1 TẬP HỢP CÁC HÀM CÙNG STYLE, THÔNG QUA NÓ CÓ THỂ BIỂU DIỄN./THAM CHIẾU/NÓI VỀ CÁC HÀM
    LÀ TÊN GỌI CHUNG TÊN TẬP HỢP NHÓM HÀM

    X LÀ TÊN GỌI CHO 1 NHÓM HÀM {F1() F2() F3() F4()...}													
 2. KHAI BÁO VÀ SỬ DỤNG DELEGATE: BỘ BA ĐÀO, PHỞ, PIANO: DATATYPE 		TÊN-BIẾN 			= VALUE
														   TÊN DELEGATE		NICK-NAME			1 HÀM CỤ THỂ
														   					CỦA 1 CÁI HÀM		NÀO ĐÓ ĐC GỌI TÊN MỚI

	delegate void X();
	X f = new Delegate(tên hàm mình đặt nick là f bên vế trái dấu bằng)
	X f = new Delegate(TellHer)						void TellHer() {...}
	   f 				--------------------------------------------> TellHer
	X f = TellHer;	//viết ngắn gọn, new ngầm
	   f = NhanEm;	//trỏ vào hàm mới, tại 1 thời điểm biến lưu 1 value
	   f += SaySweetWords; //f đại diện nhiều thân chủ, nhiều hàm: NhanEm + SaySweetWords;
						//multicast delegates
	Gọi hàm:
		f.Invoke();
		f();		//f = TellHer => f() cx là TellHer() chạy hàm hoy	

	DELEGATE: LÀ CÁCH ĐẶT TÊN GỌI CHO 1 HÀM KHÁC, 1 HÀM CÓ SẴN CÓ THÊM 1 NICK MÓI, 1 TÊN MÓI
		F() RUN		CX NHƯ THEO TELLHER() RUN
		LUẬT SƯ		NÓI X NHƯ THÂN CHỦ NÓI

===========================================================
BÀI TẬP NÂNG CAO:
* ĐỘ LẠI CLASS KUKIA ĐỂ TỰ NHIÊN HƠN NX
- KUKIA CÓ 1 HÀNH ĐỘNG RIÊNG LÀ: TakeMessage(message của ai thì đưa vào đây)
- KUKIA VẪN CÓ HÀNH ĐỘNG MeetSweatHeart() => run() 2 message kia

===========================================================
V.  CÁC BƯỚC, CÔNG THỨC ĐỂ CHƠI VỚI DELEGATE
* ĐỊNH NGHĨA NHANH LẠI VỀ DELEGATE
- DELEGATE LÀ LOẠI CLASS ĐẶC BIỆT - BẢN CHẤT MÀY CX LÀ 1 DATA TYPE NHƯ CÁC
LOẠI DATA TYPE: int, long, float, double, Person, Student, Lecturer, Pet, Dog,...
- DELEGATE LÀ LOẠI CLASS ĐẶC BIỆT NÓ DÙNG ĐỂ LƯU INFO, INFO ĐẶC BIỆT: TÊN CÁC HÀM
  THAY VÌ LƯU INFO THÔNG THƯỜNG KIỂU NGÀY THÁNG NĂM SINH, TÊN TUỔI,...

- DELEGATE LÀ TÊN GỌI CHUNG CHO 1 NHÓM HÀM CÙNG STYLE, CÙNG ĐỊNH DẠNGM CÙNG
FORMAT (TYPE)

- CHƠI VỚI DELEGATE NGHĨA LÀ GIÚP CHO 1 HÀM BÌNH THƯỜNG CÓ THÊM 1 TÊN GỌI KHÁC
NX, LÀ CÁCH ĐẶT NICK NAME CHO 1 HÀM NÒA ĐÓ, 1 TÊN GỌI THỨ 2 CHO HÀM NÀO ĐÓ
(GIỐNG MÌNH CÓ TÊN Ở NHÀ LÀ TÍ TEO), HÀM CÓ THÊM 1 TÊN GỌI KHÁC, VÌ LÀ TÊN GỌI
KHÁC NÊN CÒN GỌI LÀ TRỎ ĐẾN HÀM, CON TRỎ HÀM

- DELEGATE GIỐNG CÂU CHUYỆN LUẬT SƯ 	=   THÂN CHỦ, THÂN CHỦ LÀ HÀM GỐC ỦY
QUYỀN, TRAO QUYỀN, ỦY NHIỆM, SỨ THẦN, SỨ GIẢ CHO LUẬT SƯ HÀNH ĐỘNG THAY

- 1 HÀM SẼ CÓ 2 CÁCH GỌI: GỌI HÀM GỐC ĐỂ CHẠY, GỌI NICK NAME ĐỂ CHẠY, NÓI THAY 
CHO THÂN CHỦ
					LUẬT SƯ ( ) RUN CX NHƯ THÂN CHỦ RUN ( )




1. BƯỚC 1:	KHAI BÁO DELEGATE - TẠO DATA TYPE CHUYÊN ĐI SƯU TẦM LƯU TRỮ TÊN HÀM
			KHAI BÁO Ở NGANG CẤP, NGANG CƠ, NGANG LEVEL VỚI CLASS KHÁC, INTERFACE
			KHÁC
			CÓ THỂ XÀI THÊM: INTERNAL, PUBLIC, KO CẦN PUBLIC, TÙY
* CÚ PHÁP
			delegate kiểu-trả-về-của-hàm  Tên-Delegate-Tên-Chung-Nhóm-Hàm-Data-Type-Mới(tham-số-hàm)
* VÍ DỤ:
			delegate void F();
			pubic delegate void F(int x);
			internal delegate int F();
			delegate int F(int x);	

//thay int bằng kiểu data type bạn cần, hàm có thể có nhiều hơn 1 tham số

> F kể từ nay về sau là 1 loại Data Type ngang cơ int long double float Person Stydent Car Pet
	
*****>>>>> NHA SĨ KHUYÊN DÙNG: NÊN DÙNG CÁI DELEGATE CÓ SẴN ĐC CUNG CẤP BỞI MICROSOFT,
BỞI .NET SDK THAY VÌ PHẢI TỰ TẠO RIÊNG NHỮNG DELEGATE NHƯ KHAI BÁO Ở TRÊN

TỨC LÀ BẠN KO CẦN TỰ MAY ĐO, MUA ĐỒ SIÊU THỊ. KO CẦN KHAI BÁO DELEGATE VẪN XÀI DELEGATE, XÀI 
ĐỒ CHUẨN CỦA MICROSOFT -> TƯƠNG THÍCH QUA LẠI CODE TRÊN MẠNG, VỚI CÁC CODE CỦA DEVELOPER KHÁC
TRÊN THẾ GIỚI. ĐÂY LÀ CÁCH THIÊN HẠ ĐANG XÀI
* CÓ 4 DATA TYPE NỔI TIẾNG - 4 DELEGATE NỔI TIẾNG TRONG .NET - CHUẨN HÓA CÁCH ĐẶT TÊN CÁC 
DELEGATE

   Action				Action< >			Func< >				Predicate < >
   void F( )				void F(???)		??? F(???)				bool F(?)

GIỮA GIỜ HỌC MÓN THÚ VỊ NÀY!!!

>>>>> TẠO DATA TYPE

2. BƯỚC 2: XÀI DATA TYPE - KHAI BÁO BIẾN DELEGATE DÙNG ĐỂ TRỎ HÀM, 
						  LƯU TÊN HÀM, LƯU HÀM CỤ THỂ NÀO LUÔN
					LUẬT SƯ		= 	THÂN CHỦ;	//luật sư ông deal giùm tui
					Data_type	biến	= value;
* CÔNG THỨC: 	
		Data_Type_Delegate_Type_Tên_Nhóm_Hàm	biến_trỏ_hàm	= HÀM_NÀO_ĐÓ_Ở_ĐÂU_ĐÓ;
											nick_name_2ndname = HÀM_NÀO_ĐÓ;
* VÍ DỤ:
	F						f				=			HÀM_NÀO_ĐÓ_Ở_ĐÂU_ĐÓ;		//HÀM CÓ SẴN
	F						f				=			HÀM_NÀO_ĐÓ_Ở_NGAY_ĐÂY;	
														anonymous function, Lambda Expression 
						biến, nick, 							
						2nd name	
						luật sư
*****>>>>>	THEO NHA SĨ KHUYÊN DÙNG, THÌ KHAI BÁO NHƯ SAU:
	Action				f		=	HÀM NÀO ĐÓ...
	Action<int>			f		=	HÀM NÀO ĐÓ...
	Action<string, string> 	f		=	...
	Func<int>				f		=
	Func<double, double>	f		=
	Predicate<double>		f		=
	Predicate<Student>		f 		=	HÀM NÀO ĐÓ...
	Student				s1		=	value nào đó, Sinh viên nào đó;
	int					yob		= 	value nào đó, con số nguyên cụ thể 35.000.000;

3. BƯỚC 3: GÁN GIÁ TRỊ CHO BIẾ ĐÃ KHAI BÁO Ở BƯỚC 2 QUA TOÁN TỬ DẤU = (+= -=)
	TÊN BIẾN						= 	VALUE;
	BIẾN LÀ TÊN GỌI LÀ CHO 1 VALUE CỤ THỂ NẰM TRONG TẬP DATA TYPE..
	yob = 2003;	yob là tên gọi cho value cụ thể 2003 thuộc tập data tên là INT, LONG...

	delegate_type	biến		= value là:	
	delegate_type	biến		= tên hàm nào đó cụ thể ngoài kia (hàm gốc có sẵn  - explicit)
						= hàm nào đó ngay đây, ko thèm để tên hàm, bán tên rồi, chỉ còn
						   lại code thoy (tên hàm đi kèm code tên_hàm() {...code...})
						   chính là ta đang xài anonymous function hoặc Lambda Expression
								(bán linh hồn, bán cái tên, chỉ còn cái dây nịt)
								chỉ còn ( ) tham số hàm và {... code hàm})
				
				nick_name   = tên hàm gốc;
				luật sư	  = thân chủ hàm gốc; ủy quyền rồi, thiết lập hợp đồng
										trai quyền, ủy nhiệm, ủy thác,
				tuy 2 mà là 1, ai gáy, ai run( ) đều như nhau



						+= TRỎ TỚI NHIỀU HÀM, 1 NICK ĐẠI DIỆN CHO NHIỀU HÀM
							1 LUẬT SƯ HỢP ĐỒNG VỚI NHIỀU THÂN CHỦ
							MULTICAST DELEGATE

3.1 GÁN GIÁ TRỊ CHO BIẾ NICK NAME, BIẾN LUẬT SƯ = 1 HÀM CỤ THỂ NÀO ĐÓ CÓ SẴN
      F	f1	= TellHer;		//...ko có dùng ( ) vì gây hiểu nhầm: CHẠY HÀM ĐI
						//PHẢI LÀM HỢP ĐỒNG TRƯỚC RỒI MỚI CÃI!!!
      			    ------------------------> HÀM TELLHER ĐÃ CÓ SẴN CODE Ở CHỖ KHÁC, NAY THÊM NICK
							     NAME

	int yob = 2003;

3.2 GÁN GIÁ TRỊ CHO BIẾ NICK NAME, BIẾN LUẬT SƯ = 1 HÀM KO  CÓ SẴN , TẠO NGAY LÚC GÁN
												  TAKE AWAY - KO CÓ CHỖ SẴN, KO CẦN
												  ON THE GO...
												  HÀM ẨN DANH - ANONYMOUS FUNTION
												  BIỂU THỨC LAMBDA - HÀM ẨN DANH KIỂU
												  					   CÒN DÂY NỊT, TỐI GIẢN
																	   PHÂN SỐ
												  RÚT GỌN SỰ DƯ THỪA TRONG VIỆC GÕ LỆNH 
												  TẠO HÀM, 
												 	 BỎ ĐI TÊN HÀM - BÁN LINH HỒN, BÁN TÊN
												  	 BỎ BỚT KÍ HIỆU/CHỮ Ở THAM SỐ
												  	 BỎ BỚT KÍ HIỆU/CHỮ Ở THÂN HÀM

      F	f1	= delegate(...) { code của hàm...};	//VIP, ẨN DANH
      F	f1	= (...) => { code của hàm...};	//VIP, ẨN DANH STYLE LAMBDA EXPRESSION
									//CHỈ CÒN CÁI DÂY NỊT, PHÂN SỐ TỐI GIẢN

3.3 QUY TẮC CHỈ CÒN CÁI DÂY NỊT, QUY TẮC TỐI GIẢN VIỆC VIẾT HÀM CHƠI VỚI DELEGATE
      RÚT BỎ HẾT RÂU RIA CỦA CÁI HÀM, CHỈ GIỮ LẠI PHẦN LỖI CỦA 1 CÁI HÀM: TÊN THAM SỐ ĐẦU VÀO VÀ
THÂN HÀM (CÓ KHI BỎ LUÔN CẢ { RETURN})
  delegate_type  biến = tên_hàm_nào_đó_ngoài_kia;				void TellHer() {... code hàm ngoài kia}
  
  delegate_type biến  = delegate () {... code hàm...};	//Vip;	//anonymous    	
  delegate_type biến  = () => {... code hàm...};	//Vip;    			//Lambda

3.3.1 RÚT GỌN Ở THAM SỐ ĐẦU VÀO CỦA HÀM
					( ) =>
* NẾU ĐẦU VÀO CỦA HÀM LÀ KO CÓ GÌ CẢ, THÌ GÕ: 	( ) => 
* NẾU ĐẦU VÀO CỦA HÀM LÀ CÓ 1 ĐẦU VÀO, THÌ GÕ: 	
													( int x) => 
														( x) =>
															x => ĐC ƯA THÍCH TOÀN CẦU
* * NẾU ĐẦU VÀO CỦA HÀM LÀ CÓ TỪ 2 ĐẦU VÀO TRỞ LÊN, THÌ GÕ: 	
															(int x, int y ) =>  
																( x, y ) => ĐC ƯA THÍCH HƠN
									KO ĐC BỎ NGOẶC TRÒN NHƯ TÌNH HUỐNG 1 THAM SỐ
3.3.1 RÚT GỌN Ở THÂN HÀM
					=> {THÂN HÀM - CODE HÀM, BODY OF FUNCTION, IMPLETATION}

* NẾU HÀM CHỈ CÓ DUY NHẤT 1 DÒNG LỆNH, TA DẸP LUN {} DẸP LUN RETURN NẾU CÓ VIẾT THÂN HÀM
LÚC NÀY Y CHANG EXPRESSION BODY

					=> LỆNH GÌ ĐÓ Ở ĐÂY;
* NẾU THÂN HÀM CÓ NHIỀU DÒNG LỆNH (TỪ 2 DÒNG TRỞ LÊN) THÌ KO ĐC DỌN DẸP GÌ CẢ, VIẾT NHƯ TRUYỀN
THỐNG
					=> {...CODE CỦA HÀM, 
						LỆNH RETURN NẾU CÓ,
						DO WHILE...
					     }; //VIP
4. BƯỚC 4: GỌI HÀM, GỌI HÀM QUA NICK NAME THAY VÌ GỌI TRỰC TIẾP HÀM NHƯ TRUYỀN THỐNG

int 	yob = 2004;					//bước 3 - gán giá trị
Student s = new Student(...){...};		//bước 3 - gán giá trị
F	f     = HÀM NÀO ĐÓ TELLHER;	//bước 3 - gán giá trị
	      = anonymous function;			//bước 3 - gán giá trị đặc biệt: tên hàm, hàm
	     = biểu thức Lambda;			//bước 3 - gán giá trị đặc biệt: tên hàm, hàm
								//GÁN CODE CHO BIẾ
GỌI HÀM ĐỂ CHẠY
		f()	RUN HÀM QUA NICK NAME, LUẬT SƯ BẮT ĐẦU CÃI...
	        f.Invoke(...)	//GỌI HÀM GỐC, HAY HÀM ẨN DANH, CHẠY THOY

=======================================================================
BIẾN BÌNH THƯỜNG = GIÁ TRỊ; RỒI XONG!!!
int yob = 2004; xong
Student s = new Student(...) {...} rồi xong

BIẾN DELEGATE = GIÁ TRỊ TÊN HÀM; HÀM CỤ THỂ; HÀM ẨN DANH; HÀM STYLE LAMBDA; CHƯA XONG
GỌI HÀM ĐỂ RUN( ) GỌI HÀM GIÁN TIẾP QUA NICK NAME, ỦY QUYỀN, ỦY NHIỆM, ỦY THÁC...
====================================================
=====================================================
TỔNG KẾT NHANH GỌN VỀ DELEGATE - CHUYỆN LUẬT SƯ = THÂN CHỦ = ĐẠI DIỆN NÓI GIÙM, PHÁT NGÔN GIÙM
									NICK-NAME = HÀM-NÀO-ĐÓ;
																HÀM-NÀO-ĐÓ( )
																{
																	CODE...
																}
									CON TRỎ, BIẾN TRỎ ĐẾN HÀM NÀO ĐÓ - HÀM CÓ TÊN GỌI KHÁC NỮA
																CODE VÀ HÀM Ở TRÊN CÓ THỂ THAY BẰNG B= 
									ANONYMOUS FUNC & LAMBDA EXPRESSION
I. KHAI BÁO DELEGATE DÙNG ĐẠI DIỆN CHO 1 NHÓM HÀM
1. TỰ KHAI BÁO DELEGATE RIÊNG
-> delegate void F(...);
-> delegate ??? F(...);
->		    ??? thay bằng int, long,... delegate int F();

2. DÙNG DELEGATE CÓ SẴN CUNG CẤP BỞI .NET SDK
->	Action					: hàm void F(ko đầu vào)
->	Action<???>				: hàm void F(từ 1...16 đầu vào - dùng GENERIC)
->	Func<???, ? >			: hàm có trả về giá trị ? F(từ 0...16 đầu vào khác nhau - generic)
								->Func<???, int>
->	Predicate<?>				: hàm Func<?,boolean>
							  hàm có trả về giá trị bool đúng sai, nhưng có nhận ĐÚNG DUY NHẤT 1 
								ĐẦU VÀO - GENERIC LUN

II. GÁN GIÁ TRỊ CHO BIẾN DELEGATE 
    ĐẶT TÊN CHO 1 HÀM NÀO ĐÓ, TẠO DỤNG CÂU CHUYỆN LUẬT SƯ = THÂN CHỦ
-> Action 				f = Một_Hàm_Nào_Đó;										//ko trả về kq
-> Action<int> 			f = Một_Hàm_Nào_Đó_Mà_Có_1_Đầu_Vào_Int;					//ko trả về kq
-> Func<int>				f =  Một_Hàm_Nào_Đó_Mà_Có_Trả_Về_Int_Và_Ko_Đầu_Vào;		//có trả về kq
-> Func<int, string>		f =  Một_Hàm_Nào_Đó_Mà_Có_Trả_Về_String_Và_Đầu_Vào_Int;	//có trả về kq
-> Predicate<string>		f =  Một_Hàm_Nào_Đó_Mà_Có_Trả_Về_Bool_Và_Đầu_Vào_String;	//có trả về kq

-> Action				f = Hàm_ẩn_danh;
						  = delegate () {code hàm...};
						 
-> Action				f = Hàm_ẩn_danh; STYLE LAMBDA EXPRESSION
						= () => {code};	
-> Action				f = Hàm_ẩn_danh; STYLE LAMBDA EXPRESSION
						= (?) => {code};	
[			LUẬT SƯ	= THÂN CHỦ - HÀM NÀO ĐÓ]

* NHỚ KĨ: NẾU HÀM ẨN DANH, HÀM LAMBDA CÓ THAM SỐ ĐẦU VÀO THÌ NHỚ LÀ PHẢI GHI TRONG PHẦN
									(???) =>
									delegate (???)
		   vì ta đang bàn về hàm có đầu vào, phải ghi ra đầu vào
* NHỚ QUY TẮC TỐI UU RÚT GỌN CHỈ CÒN CÁI DÂY NỊT Ở THAM SỐ HÀM () => VÀ THÂN HÀM => {} TRONG
KHI VIẾT BIỂU THÚC LAMBDA - HÀM VÔ DANH ĐẶC BIỆT TINH GỌN

III. RUN HÀM, CHẠY HÀM, GỌI HÀM CHẠY 1 CÁCH GIÁN TIẾP QUA NICK NAME, QUA LUẬT SƯ, NHẬN ỦY
QUYỀN VÀ ACTION; KO GỌI HÀM TRỰC TIỆP (MẶC DÙ OKIE); RIÊNG HÀM ẨN DANH MẤT TÊN RỒI, GỌI QUA
NICK NAME

-> BIẾN (THAM SỐ ĐƯA VÀO NẾU CẦN)
	f(???);

-> BIẾN.INVOKE(THAM SỐ ĐƯA VÀO NẾU CẦU);
	f.Invoke(???)

* KÍ HỢP ĐỒNG - GÁN NICK NAME - LUẬT SƯ = T HÂN CHỦ
	* > XONG RỒI MỚI CALL, RUN, INVOKE
